const BASE_URL =
  (typeof import.meta !== "undefined" &&
    import.meta.env &&
    import.meta.env.VITE_API_BASE_URL) ||
  "http://100.100.45.89:3201";

export const TOKEN_KEY = "userToken"; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ

function getAuthHeader() {
  const token = localStorage.getItem(TOKEN_KEY);
  return token ? { Authorization: `Bearer ${token}` } : {};
}

function handleUnauthorized() {
  // ‡∏•‡∏ö token ‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô flow ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  localStorage.removeItem(TOKEN_KEY);
}

async function handleJsonResponse(res, context = "request") {
  if (res.status === 401) {
    const txt = await res.text().catch(() => "");
    console.error(`‚ùå ${context} 401:`, txt);
    handleUnauthorized();
    throw new Error(`Unauthorized (401): ${txt || "Invalid token"}`);
  }

  // ‡∏ö‡∏≤‡∏á backend ‡∏à‡∏∞‡∏™‡πà‡∏á 204 No Content ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  if (res.status === 204) return null;

  const text = await res.text().catch(() => "");
  if (!res.ok) {
    console.error(`‚ùå ${context} failed:`, res.status, text);
    throw new Error(`${context} failed: ${res.status} ${text}`);
  }

  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse JSON ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô raw text ‡∏Å‡∏•‡∏±‡∏ö
  try {
    const json = text ? JSON.parse(text) : null;
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á { data: ... } ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á array/object ‡∏ï‡∏£‡∏á ‡πÜ
    return json && Object.prototype.hasOwnProperty.call(json, "data")
      ? json.data
      : json;
  } catch {
    // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô text
    return text;
  }
}

// -------------------- Normalizers --------------------

/**
 * ‡∏ó‡∏≥‡πÉ‡∏´‡πâ payload ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö flatten ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö nutrition object
 * ‡πÅ‡∏•‡∏∞ map carbohydrates -> carbs ‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á client ‡πÉ‡∏ä‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å
 */
function normalizeCreatePayload(input = {}) {
  const n = input.nutrition || {};
  const calories =
    toNumber(input.calories) ?? toNumber(n.calories) ?? 0;
  const protein =
    toNumber(input.protein) ?? toNumber(n.protein) ?? 0;
  // carbs ‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å n.carbohydrates ‡∏´‡∏£‡∏∑‡∏≠ n.carbs
  const carbs =
    toNumber(input.carbs) ??
    toNumber(n.carbohydrates) ??
    toNumber(n.carbs) ??
    0;
  const fat =
    toNumber(input.fat) ?? toNumber(n.fat) ?? 0;

  const nutrition = {
    calories,
    protein,
    carbohydrates: carbs, // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô carbohydrates ‡πÉ‡∏ô object
    fat,
  };

  return {
    foodId: input.foodId,
    custom_food_name: input.custom_food_name || "Unknown food",
    calories,
    protein,
    carbs,
    fat,
    nutrition,
    customIngredients: Array.isArray(input.customIngredients)
      ? input.customIngredients.map((it, idx) => ({
          id: it.id ?? it._id ?? String(idx),
          name: String(it.name ?? "").trim(),
          quantity: toNumber(it.quantity) ?? 0,
          unit: (it.unit || "‡∏Å‡∏£‡∏±‡∏°").trim(),
        }))
      : [],
    notes: input.notes || "",
    consumedAt:  input.consumedAt ?? input.consumed_at ?? new Date().toISOString(),
    consumed_at: input.consumedAt ?? input.consumed_at ?? new Date().toISOString(),
  };
}

/**
 * ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô shape ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á client
 */
export function normalizeHistoryItem(m, idx = 0) {
  const consumed =
    m.consumedAt ??
    m.consumed_at ??
    m.date ??
    null;
    
  return {
    id: m.id ?? m.foodId ?? String(idx),
    name: m.custom_food_name || m.food_name || "Unknown food",
    calories: toNumber(m.calculated_calories) ?? toNumber(m?.nutrition?.calculated_calories) ?? 0,
    protein: toNumber(m.calculated_protein) ?? toNumber(m?.nutrition?.calculated_protein) ?? 0,
    carbs:
      toNumber(m.calculated_carbohydrates) ??
      toNumber(m?.nutrition?.calculated_carbohydrates) ??
      toNumber(m?.nutrition?.calculated_carbohydrates) ??
      0,
    fat: toNumber(m.calculated_fat) ?? toNumber(m?.nutrition?.calculated_fat) ?? 0,
    notes: m.notes ?? "",
    consumedAt: consumed,
    consumed_at: consumed,
    customIngredients: Array.isArray(m.custom_ingredients)
      ? m.custom_ingredients
      : [],
  };
}

function toNumber(v) {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
}

// -------------------- Date helpers --------------------

export function getLast7DaysRange() {
  const end = new Date();       // ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const tomorrow = new Date(end);
  tomorrow.setDate(end.getDate() + 1); // ‡∏ó‡∏≥ endDate ‡πÅ‡∏ö‡∏ö exclusive ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const start = new Date();
  start.setDate(end.getDate() - 6);

  const toISODate = (d) => d.toISOString().slice(0, 10);
  return { startDate: toISODate(start), endDate: toISODate(tomorrow) };
}

// -------------------- API Calls --------------------

/**
 * GET /api/eatinghistory?startDate=YYYY-MM-DD&endDate=YYYY-MM-DD
 * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á backend ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ default)
 */
export const eatingHistory = async (startDate, endDate) => {
  const params = new URLSearchParams();
  if (startDate) params.set("startDate", startDate);
  if (endDate) params.set("endDate", endDate);

  const url =
    params.toString().length > 0
      ? `${BASE_URL}/api/eatinghistory?${params.toString()}`
      : `${BASE_URL}/api/eatinghistory`;

  console.log("[GET] /api/eatinghistory ->", { url });

  const res = await fetch(url, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      ...getAuthHeader(),
    },
  });

  const data = await res.json()
  console.log(data.data);
  return data.data;
};

/**
 * ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Aside ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
 */
export async function fetchLast7Days() {
  const { startDate, endDate } = getLast7DaysRange();
  let data = await eatingHistory(startDate, endDate);
  if (!Array.isArray(data) || data.length === 0) {
    // fallback: ‡∏ö‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ?days=7 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°
    try {
      data = await eatingHistory(); // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á
    } catch {}
  }
  const arr = Array.isArray(data) ? data : [];
  const normalized = arr.map((m, i) => normalizeHistoryItem(m, i));
  console.log(normalized,"noooo");
  const getT = (x) =>
    Date.parse(x?.consumedAt ?? x?.consumed_at ?? x?.date ?? "") || -Infinity;
  normalized.sort((a, b) => getT(b) - getT(a));
  return normalized;
}

/**
 * POST /api/eatinghistory
 */
export async function createEatingHistory(payload) {
  const body = normalizeCreatePayload(payload);
  console.log("üì§ POST payload -> /api/eatinghistory:", body);

  if (!body?.foodId) {
    console.warn("‚ö†Ô∏è payload.foodId ‡∏ß‡πà‡∏≤‡∏á ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô reject");
  }

  const res = await fetch(`${BASE_URL}/api/eatinghistory`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...getAuthHeader(),
    },
    body: JSON.stringify(body),
  });

  const data = await handleJsonResponse(res, "POST /api/eatinghistory");
  console.log("‚úÖ POST response:", data);
  return data;
}

export async function updateEatingHistory(patch) {
console.log(patch);

const res = await fetch(`${BASE_URL}/api/eatinghistory`, {
    method: "PATCH",
    headers: {
      "Content-Type": "application/json",
      ...getAuthHeader()
    },
    body: JSON.stringify(patch),
  });

   const data = await res.json()
  console.log("‚úÖ PATCH response:", data);
  return data; 
}

/**
 * DELETE /api/eatinghistory/:id
 */
export async function deleteEatingHistory(id) {
  if (!id) throw new Error("deleteEatingHistory: missing id");

  const res = await fetch(`${BASE_URL}/api/eatinghistory/${encodeURIComponent(id)}`, {
    method: "DELETE",
    headers: {
      ...getAuthHeader(),
    },
  });

  const data = await handleJsonResponse(res, "DELETE /api/eatinghistory/:id");
  console.log("‚úÖ DELETE response:", data);
  return data; // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null (204)
}
